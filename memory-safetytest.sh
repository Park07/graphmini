#!/bin/bash

echo "=== Exact File Locations for Memory Bug Fixes ==="
echo "Based on your stack trace and codebase structure"
echo ""

cd /Users/williampark/GraphMini

echo "=== PRIMARY SUSPECTS ==="
echo ""

echo "üîç FILE 1: src/backend/vertex_set.h"
echo "Lines to check: ~123 (operator[]), ~152 (intersect), ~265 (subtract_cnt)"
echo "Location: $(pwd)/src/backend/vertex_set.h"
echo ""
echo "Key issues to look for:"
echo "- VertexSetPool buffer management (lines ~45-80)"
echo "- VertexSet destructor (lines ~60-65)"
echo "- Thread safety in AllocateWorkSpace/FreeWorkSpace"
echo ""

echo "üîç FILE 2: src/backend/minigraph.h"
echo "Lines to check: ~251 (get_indices), MiniGraphPool class"
echo "Location: $(pwd)/src/backend/minigraph.h"
echo ""
echo "Key issues to look for:"
echo "- MiniGraphPool destructor (lines ~90-100)"
echo "- Buffer allocation/deallocation race conditions"
echo "- Thread-local storage issues"
echo ""

echo "=== SPECIFIC CODE PATTERNS TO FIND ==="
echo ""

echo "1. In vertex_set.h, look for this pattern:"
echo "   class VertexSetPool {"
echo "   private:"
echo "       std::vector<IdType *> buffer_exist;"
echo "       std::vector<IdType *> buffer_avail;"
echo ""
echo "   Problem: No mutex protection for buffer vectors"
echo ""

echo "2. In vertex_set.h, find the destructor:"
echo "   ~VertexSet() {"
echo "       if (m_pooled) VertexSetPool::Get().FreeWorkSpace(m_data);"
echo "   };"
echo ""
echo "   Problem: Multiple threads might free same memory"
echo ""

echo "3. In minigraph.h, look for:"
echo "   static thread_local MiniGraphPool pool;"
echo ""
echo "   Problem: Thread-local cleanup order issues"
echo ""

echo "=== QUICK SEARCH COMMANDS ==="
echo "Run these to find the exact lines:"
echo ""

echo "# Find VertexSetPool class"
echo "grep -n \"class VertexSetPool\" src/backend/vertex_set.h"
echo ""

echo "# Find MiniGraphPool destructor"
echo "grep -n \"~MiniGraphPool\" src/backend/minigraph.h"
echo ""

echo "# Find thread_local usage"
echo "grep -n \"thread_local\" src/backend/*.h"
echo ""

echo "# Find buffer management"
echo "grep -n \"buffer_exist\\|buffer_avail\" src/backend/*.h"
echo ""

echo "=== FILES TO EXAMINE ==="
echo ""
echo "Primary files (MUST check):"
echo "  üìÅ $(pwd)/src/backend/vertex_set.h"
echo "  üìÅ $(pwd)/src/backend/minigraph.h"
echo ""
echo "Secondary files (if needed):"
echo "  üìÅ $(pwd)/src/backend/backend.h"
echo "  üìÅ $(pwd)/src/codegen_output/plan.cpp (generated code)"
echo ""

echo "=== EDITOR COMMANDS ==="
echo "Open the files directly:"
echo ""
echo "# For VS Code:"
echo "code src/backend/vertex_set.h"
echo "code src/backend/minigraph.h"
echo ""
echo "# For vim:"
echo "vim src/backend/vertex_set.h +123"
echo "vim src/backend/minigraph.h +251"
echo ""
echo "# For any editor:"
echo "open src/backend/vertex_set.h"
echo "open src/backend/minigraph.h"
echo ""

echo "=== WHAT TO LOOK FOR IN EACH FILE ==="
echo ""
echo "üìÑ vertex_set.h - VertexSetPool class:"
echo "   ‚ùå Missing mutex in buffer operations"
echo "   ‚ùå Race condition in AllocateWorkSpace()/FreeWorkSpace()"
echo "   ‚ùå Double-free in destructor"
echo ""
echo "üìÑ minigraph.h - MiniGraphPool class:"
echo "   ‚ùå Thread-local storage cleanup issues"
echo "   ‚ùå Buffer resize race conditions"
echo "   ‚ùå Memory leak in destructor"
echo ""

echo "=== SIMPLE FIXES TO TRY ==="
echo ""
echo "1. Add mutex to VertexSetPool:"
echo "   std::mutex pool_mutex; // Add this"
echo "   std::lock_guard<std::mutex> lock(pool_mutex); // In AllocateWorkSpace"
echo ""
echo "2. Fix double-free:"
echo "   if (m_pooled && m_data != nullptr) {"
echo "       VertexSetPool::Get().FreeWorkSpace(m_data);"
echo "       m_data = nullptr; // Add this"
echo "   }"
echo ""
echo "3. Add null checks:"
echo "   void FreeWorkSpace(IdType *_data) {"
echo "       if (_data == nullptr) return; // Add this"
echo "       buffer_avail.push_back(_data);"
echo "   }"
echo ""

echo "=== START HERE ==="
echo "1. Open: src/backend/vertex_set.h"
echo "2. Find: class VertexSetPool (around line 30-40)"
echo "3. Look for: buffer_exist, buffer_avail vectors"
echo "4. Check: AllocateWorkSpace() and FreeWorkSpace() methods"
echo "5. Add: Mutex protection around vector operations"